install.packages("ISLR")
library(ISLR)
auto = Auto[, !names(Auto) %in% c("name")]
set.seed(42)
auto_idx = sample(1:nrow(auto), size = round(0.5 * nrow(auto)))
auto_trn = auto[auto_idx, ]
auto_tst = auto[-auto_idx, ]
lm(mpg ~ ., data = auto_trn)
View(auto_trn)
# install.packages("ISLR")
library(ISLR)
rmse = function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
get_rmse = function(model, data, response) {
rmse(actual = subset(data, select = response, drop = TRUE),
predicted = predict(model, data))
}
get_complexity = function(model) {
length(coef(model)) - 1
}
auto = Auto[, !names(Auto) %in% c("name")]
set.seed(42)
View(auto)
auto_idx = sample(1:nrow(auto), size = round(0.5 * nrow(auto)))
auto_trn = auto[auto_idx, ]
auto_tst = auto[-auto_idx, ]
lm(mpg ~ ., data = auto_trn)
h1q5_test <- read.csv("h1q3-test-data.csv")
train_index = sample(1:nrow(auto), size=round(0.5*nrow(auto)))
train_data = auto[train_index,]
test_data = auto[-train_index,]
View(test_data)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 5)$pred
rmse(predicted = pred, actual = test_data$y)
model = lm(mpg ~ ., data = auto_trn)
model = lm(mpg ~ ., data = auto_trn)
get_rmse(model, data=test_data, response="mpg")
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 10)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 3)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 25)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 50)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -2], test = test_data[, -2], y = train_data$y, k = 5)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -3], test = test_data[, -3], y = train_data$y, k = 5)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 5)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 10000)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 100)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 2)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 3)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 4)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 5)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 6)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 7)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 8)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$y, k = 6)$pred
rmse(predicted = pred, actual = test_data$y)
pred = FNN::knn.reg(train = scale(train_data[, -1]), test = scale(test_data[, -1]), y = train_data$y, k = 6)$pred
rmse(predicted = pred, actual = test_data$y)
