h1q1 <- read.csv("h1q1.csv")
set.seed(42)
train_index = sample(1:nrow(h1q1), size=round(0.5*nrow(h1q1)))
train_data = h1q1[train_index,]
test_data = h1q1[-train_index,]
m1 <- y ~ .
m2 <- y ~ . + I(a^2) + I(b^2) + I(c^2)
m3 <- y ~ .ˆ2 + I(aˆ2) + I(bˆ2) + I(cˆ2)
m4 <- y ~ a * b * c * d + I(aˆ2) + I(bˆ2) + I(cˆ2)
h1q1 <- read.csv("h1q1.csv")
set.seed(42)
train_index = sample(1:nrow(h1q1), size=round(0.5*nrow(h1q1)))
train_data = h1q1[train_index,]
test_data = h1q1[-train_index,]
m1 <- y ~ .
m2 <- y ~ . + I(a^2) + I(b^2) + I(c^2)
m3 <- y ~ .ˆ2 + I(aˆ2) + I(bˆ2) + I(cˆ2)
m4 <- y ~ a * b * c * d + I(aˆ2) + I(bˆ2) + I(cˆ2)
fit1 = lm(m1, data=train_data)
View(fit1)
get_rmse(fit1, data=train_data, response=y)
get_rmse = function(model, data, response) {
rmse(actual = subset(data, select = response, drop = TRUE),
predicted = predict(model, data))
}
get_rmse(fit1, data=train_data, response=y)
View(fit1)
h1q1 <- read.csv("h1q1.csv")
set.seed(42)
rmse = function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
get_complexity = function(model) {
length(coef(model)) - 1
}
train_index = sample(1:nrow(h1q1), size=round(0.5*nrow(h1q1)))
train_data = h1q1[train_index,]
test_data = h1q1[-train_index,]
m1 <- y ~ .
m2 <- y ~ . + I(a^2) + I(b^2) + I(c^2)
m3 <- y ~ .ˆ2 + I(aˆ2) + I(bˆ2) + I(cˆ2)
m4 <- y ~ a * b * c * d + I(aˆ2) + I(bˆ2) + I(cˆ2)
fit1 = lm(m1, data=train_data)
get_rmse(fit1, data=train_data, response=y)
get_rmse(fit1, data=train_data, response="y")
sqrt(2)
get_complexity(fit1)
get_rmse(fit1, data=test_data, response="y")
h1q1 <- read.csv("h1q1.csv")
set.seed(42)
rmse = function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
get_complexity = function(model) {
length(coef(model)) - 1
}
make_answer = function(model) {
train_rmse = get_rmse(model, data=train_data, response="y")
test_rmse = get_rmse(model, data=test_data, response="y")
complexity = get_complexity(model)
cat("train rmse ", train_rmse)
}
train_index = sample(1:nrow(h1q1), size=round(0.5*nrow(h1q1)))
train_data = h1q1[train_index,]
test_data = h1q1[-train_index,]
# Just a linear model
m1 <- y ~ .
m2 <- y ~ . + I(a^2) + I(b^2) + I(c^2)
m3 <- y ~ .ˆ2 + I(aˆ2) + I(bˆ2) + I(cˆ2)
m4 <- y ~ a * b * c * d + I(aˆ2) + I(bˆ2) + I(cˆ2)
fit1 = lm(m1, data=train_data)
get_rmse(fit1, data=train_data, response="y")
get_rmse(fit1, data=test_data, response="y")
get_complexity(fit1)
make_answer(fit1)
make_answer = function(model) {
train_rmse = get_rmse(model, data=train_data, response="y")
cat("train rmse", train_rmse)
test_rmse = get_rmse(model, data=test_data, response="y")
cat("test rmse", test_rmse)
complexity = get_complexity(model)
cat("complexity", complexity)
}
make_answer(fit1)
make_answer = function(model) {
train_rmse = get_rmse(model, data=train_data, response="y")
cat("train rmse", train_rmse, "\n")
test_rmse = get_rmse(model, data=test_data, response="y")
cat("test rmse", test_rmse, "\n")
complexity = get_complexity(model)
cat("complexity", complexity, "\n")
}
make_answer(fit1)
fit2 = lm(m2, data=train_data)
make_answer(fit2)
fit3 = lm(m3, data=train_data)
make_answer(fit3)
fit3 = lm(m3, data=train_data)
fit4 = lm(m4, data=train_data)
# Just a linear model
m1 <- y ~ .
m2 <- y ~ . + I(a^2) + I(b^2) + I(c^2)
m3 <- y ~ .^2 + I(a^2) + I(b^2) + I(c^2)
m4 <- y ~ a * b * c * d + I(a^2) + I(b^2) + I(c^2)
fit1 = lm(m1, data=train_data)
make_answer(fit1)
fit2 = lm(m2, data=train_data)
make_answer(fit2)
fit3 = lm(m3, data=train_data)
make_answer(fit3)
fit4 = lm(m4, data=train_data)
make_answer(fit4)
